MINIMAX_EVALUATION_WINDOWS_LIST = [(140737488355328, 1099511627776, 8589934592, 67108864), (70368744177664, 549755813888, 4294967296, 33554432),
        (35184372088832, 274877906944, 2147483648, 16777216), (17592186044416, 137438953472, 1073741824, 8388608),
        (8796093022208, 68719476736, 536870912, 4194304), (4398046511104, 34359738368, 268435456, 2097152),
        (1099511627776, 8589934592, 67108864, 524288), (549755813888, 4294967296, 33554432, 262144),
        (274877906944, 2147483648, 16777216, 131072), (137438953472, 1073741824, 8388608, 65536),
        (68719476736, 536870912, 4194304, 32768), (34359738368, 268435456, 2097152, 16384),
        (8589934592, 67108864, 524288, 4096), (4294967296, 33554432, 262144, 2048),
        (2147483648, 16777216, 131072, 1024), (1073741824, 8388608, 65536, 512),
        (536870912, 4194304, 32768, 256), (268435456, 2097152, 16384, 128),
        (67108864, 524288, 4096, 32), (33554432, 262144, 2048, 16), (16777216, 131072, 1024, 8),
        (8388608, 65536, 512, 4), (4194304, 32768, 256, 2), (2097152, 16384, 128, 1),
        (140737488355328, 70368744177664, 35184372088832, 17592186044416),
        (70368744177664, 35184372088832, 17592186044416, 8796093022208),
        (35184372088832, 17592186044416, 8796093022208, 4398046511104),
        (1099511627776, 549755813888, 274877906944, 137438953472),
        (549755813888, 274877906944, 137438953472, 68719476736), (274877906944, 137438953472, 68719476736, 34359738368),
        (8589934592, 4294967296, 2147483648, 1073741824), (4294967296, 2147483648, 1073741824, 536870912),
        (2147483648, 1073741824, 536870912, 268435456), (67108864, 33554432, 16777216, 8388608),
        (33554432, 16777216, 8388608, 4194304), (16777216, 8388608, 4194304, 2097152),
        (524288, 262144, 131072, 65536), (262144, 131072, 65536, 32768),
        (131072, 65536, 32768, 16384), (4096, 2048, 1024, 512), (2048, 1024, 512, 256), (1024, 512, 256, 128),
        (32, 16, 8, 4), (16, 8, 4, 2), (8, 4, 2, 1), (140737488355328, 549755813888, 2147483648, 8388608),
        (70368744177664, 274877906944, 1073741824, 4194304), (35184372088832, 137438953472, 536870912, 2097152),
        (1099511627776, 4294967296, 16777216, 65536), (549755813888, 2147483648, 8388608, 32768),
        (274877906944, 1073741824, 4194304, 16384), (8589934592, 33554432, 131072, 512),
        (4294967296, 16777216, 65536, 256), (2147483648, 8388608, 32768, 128),
        (67108864, 262144, 1024, 4), (33554432, 131072, 512, 2), (16777216, 65536, 256, 1),
        (4398046511104, 68719476736, 1073741824, 16777216), (8796093022208, 137438953472, 2147483648, 33554432),
        (17592186044416, 274877906944, 4294967296, 67108864), (34359738368, 536870912, 8388608, 131072),
        (68719476736, 1073741824, 16777216, 262144), (137438953472, 2147483648, 33554432, 524288),
        (268435456, 4194304, 65536, 1024), (536870912, 8388608, 131072, 2048), (1073741824, 16777216, 262144, 4096),
        (2097152, 32768, 512, 8), (4194304, 65536, 1024, 16), (8388608, 131072, 2048, 32)]

DIAGONAL_UP_WINDOW_STARTING_POINTS = [47, 46, 45, 40, 39, 38, 33, 32, 31, 26, 25, 24]
DIAGONAL_DOWN_WINDOW_STARTING_POINTS = [42, 43, 44, 35, 36, 37, 28, 29, 30, 21, 22, 23]
HORIZONTAL_WINDOW_STARTING_POINTS = [47, 46, 45, 44, 43, 42, 40, 39, 38, 37, 36, 35, 33, 32, 31, 30, 29, 28, 26, 25, 24, 23, 22, 21]
VERTICAL_WINDOW_STARTING_POINTS = [47, 46, 45, 40, 39, 38, 33, 32, 31, 26, 25, 24, 19, 18, 17, 12, 11, 10, 5, 4, 3]


def list_windows() -> [(int, int, int, int)]:
    """
    Builds windows that are represented as board with a single piece (1) by shifting the number 1 in different amounts.

    Returns
    -------
    [int]:
        List of 69 possible 4-in-a-row windows as tuples.
        24 horizontal, 21 vertical, 12 diagonal-up, 12 diagonal-down
    """
    # 0b0000000_0000000_0000000_0000000_0000000_0000000_0000001 for reference
    result: [(int, int, int, int)] = []

    # horizontal windows
    # adds a tuple with 4 positions represented as bitboards (that contain 1 player piece each) to a list
    # the first position of the window is determined by different starting points of the windows
    # different orientation such as horizontal/vertical/diagonal are realized by using bit shifting specific amounts
    for bit_shift_amount in HORIZONTAL_WINDOW_STARTING_POINTS:
        result += [(1 << bit_shift_amount, 1 << (bit_shift_amount - 7), 1 << (bit_shift_amount - 14), 1 << (bit_shift_amount - 21))]

    # vertical windows
    for bit_shift_amount in VERTICAL_WINDOW_STARTING_POINTS:
        result += [(1 << bit_shift_amount, 1 << (bit_shift_amount - 1), 1 << (bit_shift_amount - 2), 1 << (bit_shift_amount - 3))]

    # diagonal-up windows
    for bit_shift_amount in DIAGONAL_UP_WINDOW_STARTING_POINTS:
        result += [(1 << bit_shift_amount, 1 << (bit_shift_amount - 8), 1 << (bit_shift_amount - 16), 1 << (bit_shift_amount - 24))]

    # diagonal-down window
    for bit_shift_amount in DIAGONAL_DOWN_WINDOW_STARTING_POINTS:
        result += [(1 << bit_shift_amount, 1 << (bit_shift_amount - 6), 1 << (bit_shift_amount - 12), 1 << (bit_shift_amount - 18))]
    return result
